name: NextDNS to Vercel

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  fetch-process-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
          cache-dependency-path: |
            **/go.mod
            **/go.sum
      
      - name: Restore Go modules cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      
      - name: Fetch NextDNS logs
        run: |
          curl -X GET 'https://api.nextdns.io/profiles/85d564/logs' \
          -H 'X-Api-Key:f31f2871d328a52a45fefadc09a1c67d0dd5d53d' \
          -o nextdns_logs.json
      
      - name: Process logs and generate HTML
        run: |
          cat << EOF > process_logs.go
          package main
          
          import (
              "encoding/json"
              "html/template"
              "io/ioutil"
              "log"
              "os"
          )
          
          type LogEntry struct {
              Timestamp string \`json:"timestamp"\`
              Domain    string \`json:"domain"\`
              Action    string \`json:"action"\`
          }
          
          type PageData struct {
              Logs []LogEntry
          }
          
          func main() {
              data, err := ioutil.ReadFile("nextdns_logs.json")
              if err != nil {
                  log.Fatal(err)
              }

              var logs []LogEntry
              err = json.Unmarshal(data, &logs)
              if err != nil {
                  log.Fatal(err)
              }

              tmpl := template.Must(template.New("logs").Parse(\`
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>NextDNS Logs</title>
              <style>
                  body { font-family: Arial, sans-serif; }
                  table { width: 100%; border-collapse: collapse; }
                  th, td { border: 1px solid #ddd; padding: 8px; }
                  th { background-color: #f2f2f2; }
              </style>
          </head>
          <body>
              <h1>NextDNS Logs</h1>
              <table>
                  <tr>
                      <th>Timestamp</th>
                      <th>Domain</th>
                      <th>Action</th>
                  </tr>
                  {{range .Logs}}
                  <tr>
                      <td>{{.Timestamp}}</td>
                      <td>{{.Domain}}</td>
                      <td>{{.Action}}</td>
                  </tr>
                  {{end}}
              </table>
          </body>
          </html>
              \`))

              os.Mkdir("public", 0755)
              f, err := os.Create("public/index.html")
              if err != nil {
                  log.Fatal(err)
              }
              defer f.Close()

              if err := tmpl.Execute(f, PageData{Logs: logs}); err != nil {
                  log.Fatal(err)
              }
          }
          EOF

          go run process_logs.go
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Vercel CLI
        run: npm install -g vercel@cli

      - name: Deploy to Vercel
        run: |
          echo '{
            "version": 2,
            "builds": [
              { "src": "public/**", "use": "@vercel/static" }
            ],
            "routes": [
              { "src": "/(.*)", "dest": "/public/$1" }
            ]
          }' > vercel.json
          vercel deploy --prod --token vGXvCULtXjKWHV4qlIndkyyz --org n0evGQ0tjl2fTcnp0fSpVK8k --project prj_57YWFOcaIWhMggbcs8ZTv31B4TYX
