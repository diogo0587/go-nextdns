name: NextDNS to Vercel

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  fetch-process-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      
      - name: Process logs and generate HTML
        run: |
          cat << EOF > process_logs.go
          package main

          import (
              "encoding/json"
              "fmt"
              "html/template"
              "io/ioutil"
              "log"
              "net/http"
              "os"
              "reflect"
              "sort"
              "time"
          )

          const (
              baseURL = "https://api.nextdns.io"
              apiKey = "f31f2871d328a52a45fefadc09a1c67d0dd5d53d"
              profileID = "85d564"
          )

          type LogEntry struct {
              Timestamp time.Time \`json:"timestamp"\`
              Domain    string    \`json:"domain"\`
              Action    string    \`json:"action"\`
              Device    string    \`json:"device"\`
          }

          type LogsResponse struct {
              Logs []LogEntry \`json:"data"\`
          }

          type PageData struct {
              Logs        []LogEntry
              Devices     []string
              Statistics  map[string]int
          }

          func main() {
              logs, err := fetchLogs()
              if err != nil {
                  log.Fatal(err)
              }

              sort.Slice(logs, func(i, j int) bool {
                  return logs[i].Timestamp.After(logs[j].Timestamp)
              })

              devices := make(map[string]bool)
              statistics := make(map[string]int)
              for _, log := range logs {
                  devices[log.Device] = true
                  statistics[log.Action]++
              }

              uniqueDevices := make([]string, 0, len(devices))
              for device := range devices {
                  uniqueDevices = append(uniqueDevices, device)
              }

              pageData := PageData{
                  Logs:       logs,
                  Devices:    uniqueDevices,
                  Statistics: statistics,
              }

              funcMap := template.FuncMap{
                  "last": func(x int, a interface{}) bool {
                      return x == reflect.ValueOf(a).Len() - 1
                  },
              }

              tmpl := template.Must(template.New("logs").Funcs(funcMap).Parse(\`
          <!DOCTYPE html>
          <html lang="pt-BR">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>NextDNS Dashboard</title>
              <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
              <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
              <style>
                  body { padding-top: 20px; }
                  .chart-container { height: 300px; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1 class="mb-4">NextDNS Dashboard</h1>
                  
                  <nav class="navbar navbar-expand-lg navbar-light bg-light mb-4">
                      <div class="container-fluid">
                          <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                              <span class="navbar-toggler-icon"></span>
                          </button>
                          <div class="collapse navbar-collapse" id="navbarNav">
                              <ul class="navbar-nav">
                                  <li class="nav-item">
                                      <a class="nav-link" href="#" onclick="loadSection('logs')">Logs</a>
                                  </li>
                                  <li class="nav-item">
                                      <a class="nav-link" href="#" onclick="loadSection('analytics')">Analytics</a>
                                  </li>
                                  <li class="nav-item">
                                      <a class="nav-link" href="#" onclick="loadSection('settings')">Settings</a>
                                  </li>
                              </ul>
                          </div>
                      </div>
                  </nav>

                  <div id="content">
                      <!-- O conteúdo será carregado aqui -->
                  </div>

                  <div class="row mb-4">
                      <div class="col-md-6">
                          <div class="card">
                              <div class="card-body">
                                  <h5 class="card-title">Filtros</h5>
                                  <form id="filterForm">
                                      <div class="mb-3">
                                          <label for="startDate" class="form-label">Data Inicial</label>
                                          <input type="date" class="form-control" id="startDate">
                                      </div>
                                      <div class="mb-3">
                                          <label for="endDate" class="form-label">Data Final</label>
                                          <input type="date" class="form-control" id="endDate">
                                      </div>
                                      <div class="mb-3">
                                          <label for="device" class="form-label">Dispositivo</label>
                                          <select class="form-select" id="device">
                                              <option value="">Todos</option>
                                              {{range .Devices}}
                                              <option value="{{.}}">{{.}}</option>
                                              {{end}}
                                          </select>
                                      </div>
                                      <button type="submit" class="btn btn-primary">Filtrar</button>
                                  </form>
                              </div>
                          </div>
                      </div>
                      <div class="col-md-6">
                          <div class="card">
                              <div class="card-body">
                                  <h5 class="card-title">Estatísticas</h5>
                                  <div class="chart-container">
                                      <canvas id="statsChart"></canvas>
                                  </div>
                              </div>
                          </div>
                      </div>
                  </div>

                  <table class="table table-striped" id="logsTable">
                      <thead>
                          <tr>
                              <th>Timestamp</th>
                              <th>Domínio</th>
                              <th>Ação</th>
                              <th>Dispositivo</th>
                          </tr>
                      </thead>
                      <tbody>
                          {{range .Logs}}
                          <tr>
                              <td>{{.Timestamp.Format "2006-01-02 15:04:05"}}</td>
                              <td>{{.Domain}}</td>
                              <td>{{.Action}}</td>
                              <td>{{.Device}}</td>
                          </tr>
                          {{end}}
                      </tbody>
                  </table>
                  <nav>
                      <ul class="pagination" id="pagination"></ul>
                  </nav>
              </div>

              <script>
              function loadSection(section) {
                  const content = document.getElementById('content');
                  content.innerHTML = 'Carregando...';

                  fetch('/api/' + section)
                      .then(response => response.text())
                      .then(data => {
                          content.innerHTML = data;
                      })
                      .catch(error => {
                          content.innerHTML = 'Erro ao carregar a seção: ' + error;
                      });
              }

              document.addEventListener('DOMContentLoaded', function() {
                  const logsTable = document.getElementById('logsTable');
                  const pagination = document.getElementById('pagination');
                  const itemsPerPage = 10;
                  let currentPage = 1;
                  let filteredLogs = [...logsTable.querySelectorAll('tbody tr')];

                  function showPage(page) {
                      const startIndex = (page - 1) * itemsPerPage;
                      const endIndex = startIndex + itemsPerPage;
                      filteredLogs.forEach((row, index) => {
                          row.style.display = (index >= startIndex && index < endIndex) ? '' : 'none';
                      });
                  }

                  function setupPagination() {
                      const pageCount = Math.ceil(filteredLogs.length / itemsPerPage);
                      pagination.innerHTML = '';
                      for (let i = 1; i <= pageCount; i++) {
                          const li = document.createElement('li');
                          li.classList.add('page-item');
                          const a = document.createElement('a');
                          a.classList.add('page-link');
                          a.href = '#';
                          a.textContent = i;
                          a.addEventListener('click', (e) => {
                              e.preventDefault();
                              currentPage = i;
                              showPage(currentPage);
                              updateActivePageLink();
                          });
                          li.appendChild(a);
                          pagination.appendChild(li);
                      }
                      updateActivePageLink();
                  }

                  function updateActivePageLink() {
                      pagination.querySelectorAll('li').forEach((li, index) => {
                          li.classList.toggle('active', index + 1 === currentPage);
                      });
                  }

                  function filterLogs() {
                      const startDate = new Date(document.getElementById('startDate').value);
                      const endDate = new Date(document.getElementById('endDate').value);
                      const device = document.getElementById('device').value;

                      filteredLogs = [...logsTable.querySelectorAll('tbody tr')].filter(row => {
                          const rowDate = new Date(row.cells[0].textContent);
                          const rowDevice = row.cells[3].textContent;
                          return (isNaN(startDate) || rowDate >= startDate) &&
                                 (isNaN(endDate) || rowDate <= endDate) &&
                                 (device === '' || rowDevice === device);
                      });

                      currentPage = 1;
                      showPage(currentPage);
                      setupPagination();
                  }

                  document.getElementById('filterForm').addEventListener('submit', function(e) {
                      e.preventDefault();
                      filterLogs();
                  });

                  setupPagination();
                  showPage(currentPage);

                  const ctx = document.getElementById('statsChart').getContext('2d');
                  new Chart(ctx, {
                      type: 'pie',
                      data: {
                          labels: [{{range $index, $action := .Statistics}}{{$action}}{{if not (last $index $.Statistics)}},{{end}}{{end}}],
                          datasets: [{
                              data: [{{range $index, $count := .Statistics}}{{$count}}{{if not (last $index $.Statistics)}},{{end}}{{end}}],
                              backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF']
                          }]
                      },
                      options: {
                          responsive: true,
                          maintainAspectRatio: false
                      }
                  });
              });
              </script>
          </body>
          </html>
              \`))

              os.Mkdir("public", 0755)
              f, err := os.Create("public/index.html")
              if err != nil {
                  log.Fatal(err)
              }
              defer f.Close()

              if err := tmpl.Execute(f, pageData); err != nil {
                  log.Fatal(err)
              }
          }

          func fetchLogs() ([]LogEntry, error) {
              url := fmt.Sprintf("%s/profiles/%s/logs", baseURL, profileID)
              req, err := http.NewRequest("GET", url, nil)
              if err != nil {
                  return nil, err
              }

              req.Header.Set("X-Api-Key", apiKey)

              client := &http.Client{}
              resp, err := client.Do(req)
              if err != nil {
                  return nil, err
              }
              defer resp.Body.Close()

              body, err := ioutil.ReadAll(resp.Body)
              if err != nil {
                  return nil, err
              }

              var logsResponse LogsResponse
              err = json.Unmarshal(body, &logsResponse)
              if err != nil {
                  return nil, err
              }

              return logsResponse.Logs, nil
          }
          EOF

          go run process_logs.go
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel
        run: |
          echo '{
            "version": 2,
            "builds": [
              { "src": "public/**", "use": "@vercel/static" }
            ],
            "routes": [
              { "src": "/(.*)", "dest": "/public/$1" }
            ]
          }' > vercel.json
          vercel deploy --prod --token vGXvCULtXjKWHV4qlIndkyyz .
